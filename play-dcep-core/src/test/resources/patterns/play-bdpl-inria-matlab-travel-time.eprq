#
# Title: Dynamic Agenda: Alert to take the highway if conditions are well
#
# Scenario: I configure my agenda for the day, I'm in Sophia Antipolis and I will 
# go to Nice in the day.  
# When I'm at 100 m from and Entry point of the highway and the Highway estimation
# time does not exceed 30 min and the arrival time is before 6:00 PM. I get an alert to take 
# the highway 

# TODO:
# - The arrival time not more than 6:00 PM 
# - The maximum time of the highway is given by the user (event): Entry point , Exit point , time 
# - The Event about the traffic condition has (entry point, exist point, time, duration) 
# - The user is located about 100m from the entry point of a highway entry
# - 

PREFIX mlt:     <http://events.event-processing.org/MatlabTravelTime/>
PREFIX mlu:     <http://events.event-processing.org/MatlabUser/>
PREFIX mgu:     <http://events.event-processing.org/MyGreenServicesUsers/>
PREFIX mgs:     <http://events.event-processing.org/MyGreenServicesSensors/>
PREFIX rdf:     <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX ucmatlab: <http://events.event-processing.org/uc/Matlab/>
PREFIX geo:     <http://www.w3.org/2003/01/geo/wgs84_pos#>
PREFIX xsd:     <http://www.w3.org/2001/XMLSchema#>
PREFIX sioc:    <http://rdfs.org/sioc/ns#>
PREFIX :        <http://events.event-processing.org/types/>

CONSTRUCT {
	:e rdf:type :CloseAlert .
	:e :stream <http://streams.event-processing.org/ids/PollutionAlert#stream> .
	:e :message "You can take the High way now, conditions are ideal" .
	:e :members ?e1, ?e2 .
	:e mlt:travelTime ?travelTime1 .
	:e mlu:idUser ?userId .
} WHERE {
	WINDOW {
		EVENT ?id1 {
			?e1 rdf:type :MyGreenServicesSensors .
			?e1 :stream <http://streams.event-processing.org/ids/MyGreenServicesUsers#stream> .
			?e1 :location [ geo:lat ?latitude1 ; geo:long ?longitude1 ] .
			?e1 :endTime ?endTime1 .
			?e1 mlt:travelTime ?travelTime1 .
			?e1 mgu:idUser ?userId .
			}
		SEQ		
		EVENT ?id2 {
			?e2 rdf:type :MatlabTravelTime .
			?e2 :stream <http://streams.event-processing.org/ids/MatlabTravelTime#stream> .
			?e2 ucmatlab:entryPoint [ geo:lat ?latitude2 ; geo:long ?longitude2 ] .
			?e2 mlt:travelTime ?travelTime2 .
			?e2 :endTime ?endTime2 .
			}
			FILTER (
				abs(?latitude1 - ?latitude2) < 1 && abs(?longitude1 - ?longitude2) < 0.1 # nearby
				&& (?travelTime1 < ?travelTime2) 
				# && ((?endTime2-?endTime1) + ?travelTime2) < ?endTime2
			)
	} ("PT3M"^^xsd:duration, sliding)
}

