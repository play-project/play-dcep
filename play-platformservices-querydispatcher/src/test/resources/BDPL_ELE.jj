options{  //static = true; //default
  static = false;}PARSER_BEGIN(PlayEleParser)package eu.play_project.play_platformservices_querydispatcher.playEleParser;public class PlayEleParser{  public static void start(String txt)  {}}PARSER_END(PlayEleParser)SKIP :{  " "| "\r"| "\t"| "\n"}TOKEN : /* OPERATORS */{  < EVENT : "EVENT" >| < #SEQ : "SEQ" >| < #AND : "AND" >}TOKEN :{  < #DIGIT : [ "0"-"9" ] >| < #CHAR : [ "a"-"z", "A"-"Z" ] >| < LPAREN : "(" >| < RPAREN : ")" >| < SINGLE_QUOTE : "'" >| < DO : "do" >| < BIN_OPERATOR :    < SEQ >  | < AND >>| < CEID : "CEID" (< DIGIT >)+ > // Variable for complex event id.
| < STRING :    "\""    (      < DIGIT >    | < CHAR >    )+    "\"" >| < PROLOG_VAR : "V" ([ "A"-"Z", "a"-"z", "0"-"9" ])+ > // Variale
| < URI_CHARS :    (      < DIGIT >    | < CHAR >    | [ ":", ".", "-", "/", "?", "#" ]    )+ >}void Start() :{}{  ElePattern()}void ElePattern() :{}{  Complex() "<-" SimpleEventPattern()  (    "'" < BIN_OPERATOR > "'" SimpleEventPattern()  )*}void Complex() :{}{  "complex"  	< LPAREN >  		< CEID > "," "'" < URI_CHARS > "'"  	< RPAREN >  	< DO >  	< LPAREN >  		ComplexEventPayloadGenerationExression()  		SaveSharedVariabelValues()  		Having()  < RPAREN >}void GenerateConstructResult() :{}{  "generateConstructResult"   < LPAREN >   	TripleElement() ","   	TripleElement() ","   	TripleElement() ","   	< CEID >   < RPAREN >}void TripleElement() :{}{  (    (      "'"      (        < STRING >      | < URI_CHARS >      )      "'"    )  | < PROLOG_VAR >  )}void SaveSharedVariabelValues() :{}{  // 
  "variabeValuesAdd(" "'" < URI_CHARS > "'" "," "'" < URI_CHARS > "'" "," < PROLOG_VAR > < RPAREN >}void DecrementReferenceCounter() :{}{  ", decrementReferenceCounter(ViD), collectGarbage(ViD1)"}void SimpleEventPattern() :{}{  "('" < URI_CHARS > "'(" < PROLOG_VAR > ")" "'WHERE'" < LPAREN > AdditionalConditions() < RPAREN > < RPAREN >}void AdditionalConditions() :{}{  TriplestoreQuery() ","  (    FilterExpression() ","  )?  ReferenceCounter() "," PerformanceMeasurement()  (    "," GenerateCEID()  )*}void TriplestoreQuery() :{}{  "rdf(" GraphTerm() "," GraphTerm() "," GraphTerm() "," < PROLOG_VAR > < RPAREN > ","  (    "rdf(" GraphTerm() "," GraphTerm() "," GraphTerm() "," < PROLOG_VAR > < RPAREN > ","  )*}void FilterExpression() :{}{  ("minus( " < PROLOG_VAR > ", " < PROLOG_VAR > ", " < PROLOG_VAR > "), ")|  (    < LPAREN > "xpath(element(sparqlFilter, [keyWord=" < PROLOG_VAR > "], []), //sparqlFilter(contains(@keyWord,'"    (      < PROLOG_VAR >    | < URI_CHARS >    )    "')), _)" < RPAREN > ","  )}void ReferenceCounter() :{}{  "incrementReferenceCounter(" < PROLOG_VAR > ")"}void Having() :{}{  // Math exp with boolean result.  ","}void ComplexEventPayloadGenerationExression() :{}{  ("(forall(" DataSource() ", " DataSinkPayloadStorage() ")")}void DataSource() :{}{    OneTripleSource() ("," OneTripleSource())*}void OneTripleSource() :{}{ "dbQuery_" < STRING > "_" < STRING > "(" (< PROLOG_VAR >)* ")"}void DataSinkPayloadStorage() :{}{  OneTripleSink() ("," OneTripleSink())*}void OneTripleSink() :{}{  GenerateConstructResult()}void PerformanceMeasurement() :{}{  "measure(" < URI_CHARS > ")"}void GraphTerm() :{}{  (    "'" < URI_CHARS > "'"  | < PROLOG_VAR >  | < STRING >  )}void GenerateCEID() :{}{  "random(1000000, 9000000, " < CEID > ")"}
